// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i auth_v1/internal/repository.AuthRepository -o auth_repository_minimock.go -n AuthRepositoryMock -p mocks

import (
	"context"
	"github.com/ne4chelovek/auth-service/internal/model"
	mm_repository "github.com/ne4chelovek/auth-service/internal/repository"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/jackc/pgx/v5"
	"google.golang.org/protobuf/types/known/emptypb"
)

// AuthRepositoryMock implements mm_repository.AuthRepository
type AuthRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, user *model.CreateUser) (i1 int64, err error)
	funcCreateOrigin    string
	inspectFuncCreate   func(ctx context.Context, user *model.CreateUser)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mAuthRepositoryMockCreate

	funcDelete          func(ctx context.Context, Id int64) (ep1 *emptypb.Empty, err error)
	funcDeleteOrigin    string
	inspectFuncDelete   func(ctx context.Context, Id int64)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mAuthRepositoryMockDelete

	funcGet          func(ctx context.Context, Id int64) (up1 *model.User, err error)
	funcGetOrigin    string
	inspectFuncGet   func(ctx context.Context, Id int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mAuthRepositoryMockGet

	funcUpdate          func(ctx context.Context, userUp *model.UpdateUser) (ep1 *emptypb.Empty, err error)
	funcUpdateOrigin    string
	inspectFuncUpdate   func(ctx context.Context, userUp *model.UpdateUser)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mAuthRepositoryMockUpdate

	funcWithTx          func(tx pgx.Tx) (a1 mm_repository.UsersRepository)
	funcWithTxOrigin    string
	inspectFuncWithTx   func(tx pgx.Tx)
	afterWithTxCounter  uint64
	beforeWithTxCounter uint64
	WithTxMock          mAuthRepositoryMockWithTx
}

// NewAuthRepositoryMock returns a mock for mm_repository.AuthRepository
func NewAuthRepositoryMock(t minimock.Tester) *AuthRepositoryMock {
	m := &AuthRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mAuthRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*AuthRepositoryMockCreateParams{}

	m.DeleteMock = mAuthRepositoryMockDelete{mock: m}
	m.DeleteMock.callArgs = []*AuthRepositoryMockDeleteParams{}

	m.GetMock = mAuthRepositoryMockGet{mock: m}
	m.GetMock.callArgs = []*AuthRepositoryMockGetParams{}

	m.UpdateMock = mAuthRepositoryMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*AuthRepositoryMockUpdateParams{}

	m.WithTxMock = mAuthRepositoryMockWithTx{mock: m}
	m.WithTxMock.callArgs = []*AuthRepositoryMockWithTxParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAuthRepositoryMockCreate struct {
	optional           bool
	mock               *AuthRepositoryMock
	defaultExpectation *AuthRepositoryMockCreateExpectation
	expectations       []*AuthRepositoryMockCreateExpectation

	callArgs []*AuthRepositoryMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthRepositoryMockCreateExpectation specifies expectation struct of the AuthRepository.Create
type AuthRepositoryMockCreateExpectation struct {
	mock               *AuthRepositoryMock
	params             *AuthRepositoryMockCreateParams
	paramPtrs          *AuthRepositoryMockCreateParamPtrs
	expectationOrigins AuthRepositoryMockCreateExpectationOrigins
	results            *AuthRepositoryMockCreateResults
	returnOrigin       string
	Counter            uint64
}

// AuthRepositoryMockCreateParams contains parameters of the AuthRepository.Create
type AuthRepositoryMockCreateParams struct {
	ctx  context.Context
	user *model.CreateUser
}

// AuthRepositoryMockCreateParamPtrs contains pointers to parameters of the AuthRepository.Create
type AuthRepositoryMockCreateParamPtrs struct {
	ctx  *context.Context
	user **model.CreateUser
}

// AuthRepositoryMockCreateResults contains results of the AuthRepository.Create
type AuthRepositoryMockCreateResults struct {
	i1  int64
	err error
}

// AuthRepositoryMockCreateOrigins contains origins of expectations of the AuthRepository.Create
type AuthRepositoryMockCreateExpectationOrigins struct {
	origin     string
	originCtx  string
	originUser string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mAuthRepositoryMockCreate) Optional() *mAuthRepositoryMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for AuthRepository.Create
func (mmCreate *mAuthRepositoryMockCreate) Expect(ctx context.Context, user *model.CreateUser) *mAuthRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &AuthRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("AuthRepositoryMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &AuthRepositoryMockCreateParams{ctx, user}
	mmCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for AuthRepository.Create
func (mmCreate *mAuthRepositoryMockCreate) ExpectCtxParam1(ctx context.Context) *mAuthRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &AuthRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("AuthRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &AuthRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreate
}

// ExpectUserParam2 sets up expected param user for AuthRepository.Create
func (mmCreate *mAuthRepositoryMockCreate) ExpectUserParam2(user *model.CreateUser) *mAuthRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &AuthRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("AuthRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &AuthRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.user = &user
	mmCreate.defaultExpectation.expectationOrigins.originUser = minimock.CallerInfo(1)

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the AuthRepository.Create
func (mmCreate *mAuthRepositoryMockCreate) Inspect(f func(ctx context.Context, user *model.CreateUser)) *mAuthRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for AuthRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by AuthRepository.Create
func (mmCreate *mAuthRepositoryMockCreate) Return(i1 int64, err error) *AuthRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &AuthRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &AuthRepositoryMockCreateResults{i1, err}
	mmCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// Set uses given function f to mock the AuthRepository.Create method
func (mmCreate *mAuthRepositoryMockCreate) Set(f func(ctx context.Context, user *model.CreateUser) (i1 int64, err error)) *AuthRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the AuthRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the AuthRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	mmCreate.mock.funcCreateOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// When sets expectation for the AuthRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mAuthRepositoryMockCreate) When(ctx context.Context, user *model.CreateUser) *AuthRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthRepositoryMock.Create mock is already set by Set")
	}

	expectation := &AuthRepositoryMockCreateExpectation{
		mock:               mmCreate.mock,
		params:             &AuthRepositoryMockCreateParams{ctx, user},
		expectationOrigins: AuthRepositoryMockCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up AuthRepository.Create return parameters for the expectation previously defined by the When method
func (e *AuthRepositoryMockCreateExpectation) Then(i1 int64, err error) *AuthRepositoryMock {
	e.results = &AuthRepositoryMockCreateResults{i1, err}
	return e.mock
}

// Times sets number of times AuthRepository.Create should be invoked
func (mmCreate *mAuthRepositoryMockCreate) Times(n uint64) *mAuthRepositoryMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of AuthRepositoryMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	mmCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreate
}

func (mmCreate *mAuthRepositoryMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements mm_repository.AuthRepository
func (mmCreate *AuthRepositoryMock) Create(ctx context.Context, user *model.CreateUser) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	mmCreate.t.Helper()

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, user)
	}

	mm_params := AuthRepositoryMockCreateParams{ctx, user}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := AuthRepositoryMockCreateParams{ctx, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("AuthRepositoryMock.Create got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmCreate.t.Errorf("AuthRepositoryMock.Create got unexpected parameter user, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originUser, *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("AuthRepositoryMock.Create got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreate.CreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the AuthRepositoryMock.Create")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, user)
	}
	mmCreate.t.Fatalf("Unexpected call to AuthRepositoryMock.Create. %v %v", ctx, user)
	return
}

// CreateAfterCounter returns a count of finished AuthRepositoryMock.Create invocations
func (mmCreate *AuthRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of AuthRepositoryMock.Create invocations
func (mmCreate *AuthRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to AuthRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mAuthRepositoryMockCreate) Calls() []*AuthRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*AuthRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *AuthRepositoryMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *AuthRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthRepositoryMock.Create at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthRepositoryMock.Create at\n%s", m.CreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthRepositoryMock.Create at\n%s with params: %#v", m.CreateMock.defaultExpectation.expectationOrigins.origin, *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Errorf("Expected call to AuthRepositoryMock.Create at\n%s", m.funcCreateOrigin)
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthRepositoryMock.Create at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), m.CreateMock.expectedInvocationsOrigin, afterCreateCounter)
	}
}

type mAuthRepositoryMockDelete struct {
	optional           bool
	mock               *AuthRepositoryMock
	defaultExpectation *AuthRepositoryMockDeleteExpectation
	expectations       []*AuthRepositoryMockDeleteExpectation

	callArgs []*AuthRepositoryMockDeleteParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthRepositoryMockDeleteExpectation specifies expectation struct of the AuthRepository.Delete
type AuthRepositoryMockDeleteExpectation struct {
	mock               *AuthRepositoryMock
	params             *AuthRepositoryMockDeleteParams
	paramPtrs          *AuthRepositoryMockDeleteParamPtrs
	expectationOrigins AuthRepositoryMockDeleteExpectationOrigins
	results            *AuthRepositoryMockDeleteResults
	returnOrigin       string
	Counter            uint64
}

// AuthRepositoryMockDeleteParams contains parameters of the AuthRepository.Delete
type AuthRepositoryMockDeleteParams struct {
	ctx context.Context
	Id  int64
}

// AuthRepositoryMockDeleteParamPtrs contains pointers to parameters of the AuthRepository.Delete
type AuthRepositoryMockDeleteParamPtrs struct {
	ctx *context.Context
	Id  *int64
}

// AuthRepositoryMockDeleteResults contains results of the AuthRepository.Delete
type AuthRepositoryMockDeleteResults struct {
	ep1 *emptypb.Empty
	err error
}

// AuthRepositoryMockDeleteOrigins contains origins of expectations of the AuthRepository.Delete
type AuthRepositoryMockDeleteExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDelete *mAuthRepositoryMockDelete) Optional() *mAuthRepositoryMockDelete {
	mmDelete.optional = true
	return mmDelete
}

// Expect sets up expected params for AuthRepository.Delete
func (mmDelete *mAuthRepositoryMockDelete) Expect(ctx context.Context, Id int64) *mAuthRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &AuthRepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.paramPtrs != nil {
		mmDelete.mock.t.Fatalf("AuthRepositoryMock.Delete mock is already set by ExpectParams functions")
	}

	mmDelete.defaultExpectation.params = &AuthRepositoryMockDeleteParams{ctx, Id}
	mmDelete.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// ExpectCtxParam1 sets up expected param ctx for AuthRepository.Delete
func (mmDelete *mAuthRepositoryMockDelete) ExpectCtxParam1(ctx context.Context) *mAuthRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &AuthRepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("AuthRepositoryMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &AuthRepositoryMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ctx = &ctx
	mmDelete.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDelete
}

// ExpectIdParam2 sets up expected param Id for AuthRepository.Delete
func (mmDelete *mAuthRepositoryMockDelete) ExpectIdParam2(Id int64) *mAuthRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &AuthRepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("AuthRepositoryMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &AuthRepositoryMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.Id = &Id
	mmDelete.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the AuthRepository.Delete
func (mmDelete *mAuthRepositoryMockDelete) Inspect(f func(ctx context.Context, Id int64)) *mAuthRepositoryMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for AuthRepositoryMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by AuthRepository.Delete
func (mmDelete *mAuthRepositoryMockDelete) Return(ep1 *emptypb.Empty, err error) *AuthRepositoryMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &AuthRepositoryMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &AuthRepositoryMockDeleteResults{ep1, err}
	mmDelete.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// Set uses given function f to mock the AuthRepository.Delete method
func (mmDelete *mAuthRepositoryMockDelete) Set(f func(ctx context.Context, Id int64) (ep1 *emptypb.Empty, err error)) *AuthRepositoryMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the AuthRepository.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the AuthRepository.Delete method")
	}

	mmDelete.mock.funcDelete = f
	mmDelete.mock.funcDeleteOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// When sets expectation for the AuthRepository.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mAuthRepositoryMockDelete) When(ctx context.Context, Id int64) *AuthRepositoryMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthRepositoryMock.Delete mock is already set by Set")
	}

	expectation := &AuthRepositoryMockDeleteExpectation{
		mock:               mmDelete.mock,
		params:             &AuthRepositoryMockDeleteParams{ctx, Id},
		expectationOrigins: AuthRepositoryMockDeleteExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up AuthRepository.Delete return parameters for the expectation previously defined by the When method
func (e *AuthRepositoryMockDeleteExpectation) Then(ep1 *emptypb.Empty, err error) *AuthRepositoryMock {
	e.results = &AuthRepositoryMockDeleteResults{ep1, err}
	return e.mock
}

// Times sets number of times AuthRepository.Delete should be invoked
func (mmDelete *mAuthRepositoryMockDelete) Times(n uint64) *mAuthRepositoryMockDelete {
	if n == 0 {
		mmDelete.mock.t.Fatalf("Times of AuthRepositoryMock.Delete mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDelete.expectedInvocations, n)
	mmDelete.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDelete
}

func (mmDelete *mAuthRepositoryMockDelete) invocationsDone() bool {
	if len(mmDelete.expectations) == 0 && mmDelete.defaultExpectation == nil && mmDelete.mock.funcDelete == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDelete.mock.afterDeleteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDelete.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Delete implements mm_repository.AuthRepository
func (mmDelete *AuthRepositoryMock) Delete(ctx context.Context, Id int64) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	mmDelete.t.Helper()

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, Id)
	}

	mm_params := AuthRepositoryMockDeleteParams{ctx, Id}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_want_ptrs := mmDelete.DeleteMock.defaultExpectation.paramPtrs

		mm_got := AuthRepositoryMockDeleteParams{ctx, Id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDelete.t.Errorf("AuthRepositoryMock.Delete got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.Id != nil && !minimock.Equal(*mm_want_ptrs.Id, mm_got.Id) {
				mmDelete.t.Errorf("AuthRepositoryMock.Delete got unexpected parameter Id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.Id, mm_got.Id, minimock.Diff(*mm_want_ptrs.Id, mm_got.Id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("AuthRepositoryMock.Delete got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDelete.DeleteMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the AuthRepositoryMock.Delete")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, Id)
	}
	mmDelete.t.Fatalf("Unexpected call to AuthRepositoryMock.Delete. %v %v", ctx, Id)
	return
}

// DeleteAfterCounter returns a count of finished AuthRepositoryMock.Delete invocations
func (mmDelete *AuthRepositoryMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of AuthRepositoryMock.Delete invocations
func (mmDelete *AuthRepositoryMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to AuthRepositoryMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mAuthRepositoryMockDelete) Calls() []*AuthRepositoryMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*AuthRepositoryMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *AuthRepositoryMock) MinimockDeleteDone() bool {
	if m.DeleteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMock.invocationsDone()
}

// MinimockDeleteInspect logs each unmet expectation
func (m *AuthRepositoryMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthRepositoryMock.Delete at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteCounter := mm_atomic.LoadUint64(&m.afterDeleteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && afterDeleteCounter < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthRepositoryMock.Delete at\n%s", m.DeleteMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthRepositoryMock.Delete at\n%s with params: %#v", m.DeleteMock.defaultExpectation.expectationOrigins.origin, *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && afterDeleteCounter < 1 {
		m.t.Errorf("Expected call to AuthRepositoryMock.Delete at\n%s", m.funcDeleteOrigin)
	}

	if !m.DeleteMock.invocationsDone() && afterDeleteCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthRepositoryMock.Delete at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMock.expectedInvocations), m.DeleteMock.expectedInvocationsOrigin, afterDeleteCounter)
	}
}

type mAuthRepositoryMockGet struct {
	optional           bool
	mock               *AuthRepositoryMock
	defaultExpectation *AuthRepositoryMockGetExpectation
	expectations       []*AuthRepositoryMockGetExpectation

	callArgs []*AuthRepositoryMockGetParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthRepositoryMockGetExpectation specifies expectation struct of the AuthRepository.Get
type AuthRepositoryMockGetExpectation struct {
	mock               *AuthRepositoryMock
	params             *AuthRepositoryMockGetParams
	paramPtrs          *AuthRepositoryMockGetParamPtrs
	expectationOrigins AuthRepositoryMockGetExpectationOrigins
	results            *AuthRepositoryMockGetResults
	returnOrigin       string
	Counter            uint64
}

// AuthRepositoryMockGetParams contains parameters of the AuthRepository.Get
type AuthRepositoryMockGetParams struct {
	ctx context.Context
	Id  int64
}

// AuthRepositoryMockGetParamPtrs contains pointers to parameters of the AuthRepository.Get
type AuthRepositoryMockGetParamPtrs struct {
	ctx *context.Context
	Id  *int64
}

// AuthRepositoryMockGetResults contains results of the AuthRepository.Get
type AuthRepositoryMockGetResults struct {
	up1 *model.User
	err error
}

// AuthRepositoryMockGetOrigins contains origins of expectations of the AuthRepository.Get
type AuthRepositoryMockGetExpectationOrigins struct {
	origin    string
	originCtx string
	originId  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mAuthRepositoryMockGet) Optional() *mAuthRepositoryMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for AuthRepository.Get
func (mmGet *mAuthRepositoryMockGet) Expect(ctx context.Context, Id int64) *mAuthRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AuthRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("AuthRepositoryMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &AuthRepositoryMockGetParams{ctx, Id}
	mmGet.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for AuthRepository.Get
func (mmGet *mAuthRepositoryMockGet) ExpectCtxParam1(ctx context.Context) *mAuthRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AuthRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("AuthRepositoryMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &AuthRepositoryMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx
	mmGet.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGet
}

// ExpectIdParam2 sets up expected param Id for AuthRepository.Get
func (mmGet *mAuthRepositoryMockGet) ExpectIdParam2(Id int64) *mAuthRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AuthRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("AuthRepositoryMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &AuthRepositoryMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.Id = &Id
	mmGet.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the AuthRepository.Get
func (mmGet *mAuthRepositoryMockGet) Inspect(f func(ctx context.Context, Id int64)) *mAuthRepositoryMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for AuthRepositoryMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by AuthRepository.Get
func (mmGet *mAuthRepositoryMockGet) Return(up1 *model.User, err error) *AuthRepositoryMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &AuthRepositoryMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &AuthRepositoryMockGetResults{up1, err}
	mmGet.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// Set uses given function f to mock the AuthRepository.Get method
func (mmGet *mAuthRepositoryMockGet) Set(f func(ctx context.Context, Id int64) (up1 *model.User, err error)) *AuthRepositoryMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the AuthRepository.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the AuthRepository.Get method")
	}

	mmGet.mock.funcGet = f
	mmGet.mock.funcGetOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// When sets expectation for the AuthRepository.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mAuthRepositoryMockGet) When(ctx context.Context, Id int64) *AuthRepositoryMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("AuthRepositoryMock.Get mock is already set by Set")
	}

	expectation := &AuthRepositoryMockGetExpectation{
		mock:               mmGet.mock,
		params:             &AuthRepositoryMockGetParams{ctx, Id},
		expectationOrigins: AuthRepositoryMockGetExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up AuthRepository.Get return parameters for the expectation previously defined by the When method
func (e *AuthRepositoryMockGetExpectation) Then(up1 *model.User, err error) *AuthRepositoryMock {
	e.results = &AuthRepositoryMockGetResults{up1, err}
	return e.mock
}

// Times sets number of times AuthRepository.Get should be invoked
func (mmGet *mAuthRepositoryMockGet) Times(n uint64) *mAuthRepositoryMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of AuthRepositoryMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	mmGet.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGet
}

func (mmGet *mAuthRepositoryMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements mm_repository.AuthRepository
func (mmGet *AuthRepositoryMock) Get(ctx context.Context, Id int64) (up1 *model.User, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	mmGet.t.Helper()

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, Id)
	}

	mm_params := AuthRepositoryMockGetParams{ctx, Id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := AuthRepositoryMockGetParams{ctx, Id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("AuthRepositoryMock.Get got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.Id != nil && !minimock.Equal(*mm_want_ptrs.Id, mm_got.Id) {
				mmGet.t.Errorf("AuthRepositoryMock.Get got unexpected parameter Id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.Id, mm_got.Id, minimock.Diff(*mm_want_ptrs.Id, mm_got.Id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("AuthRepositoryMock.Get got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGet.GetMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the AuthRepositoryMock.Get")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, Id)
	}
	mmGet.t.Fatalf("Unexpected call to AuthRepositoryMock.Get. %v %v", ctx, Id)
	return
}

// GetAfterCounter returns a count of finished AuthRepositoryMock.Get invocations
func (mmGet *AuthRepositoryMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of AuthRepositoryMock.Get invocations
func (mmGet *AuthRepositoryMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to AuthRepositoryMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mAuthRepositoryMockGet) Calls() []*AuthRepositoryMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*AuthRepositoryMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *AuthRepositoryMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *AuthRepositoryMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthRepositoryMock.Get at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthRepositoryMock.Get at\n%s", m.GetMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthRepositoryMock.Get at\n%s with params: %#v", m.GetMock.defaultExpectation.expectationOrigins.origin, *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Errorf("Expected call to AuthRepositoryMock.Get at\n%s", m.funcGetOrigin)
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthRepositoryMock.Get at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), m.GetMock.expectedInvocationsOrigin, afterGetCounter)
	}
}

type mAuthRepositoryMockUpdate struct {
	optional           bool
	mock               *AuthRepositoryMock
	defaultExpectation *AuthRepositoryMockUpdateExpectation
	expectations       []*AuthRepositoryMockUpdateExpectation

	callArgs []*AuthRepositoryMockUpdateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthRepositoryMockUpdateExpectation specifies expectation struct of the AuthRepository.Update
type AuthRepositoryMockUpdateExpectation struct {
	mock               *AuthRepositoryMock
	params             *AuthRepositoryMockUpdateParams
	paramPtrs          *AuthRepositoryMockUpdateParamPtrs
	expectationOrigins AuthRepositoryMockUpdateExpectationOrigins
	results            *AuthRepositoryMockUpdateResults
	returnOrigin       string
	Counter            uint64
}

// AuthRepositoryMockUpdateParams contains parameters of the AuthRepository.Update
type AuthRepositoryMockUpdateParams struct {
	ctx    context.Context
	userUp *model.UpdateUser
}

// AuthRepositoryMockUpdateParamPtrs contains pointers to parameters of the AuthRepository.Update
type AuthRepositoryMockUpdateParamPtrs struct {
	ctx    *context.Context
	userUp **model.UpdateUser
}

// AuthRepositoryMockUpdateResults contains results of the AuthRepository.Update
type AuthRepositoryMockUpdateResults struct {
	ep1 *emptypb.Empty
	err error
}

// AuthRepositoryMockUpdateOrigins contains origins of expectations of the AuthRepository.Update
type AuthRepositoryMockUpdateExpectationOrigins struct {
	origin       string
	originCtx    string
	originUserUp string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdate *mAuthRepositoryMockUpdate) Optional() *mAuthRepositoryMockUpdate {
	mmUpdate.optional = true
	return mmUpdate
}

// Expect sets up expected params for AuthRepository.Update
func (mmUpdate *mAuthRepositoryMockUpdate) Expect(ctx context.Context, userUp *model.UpdateUser) *mAuthRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &AuthRepositoryMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.paramPtrs != nil {
		mmUpdate.mock.t.Fatalf("AuthRepositoryMock.Update mock is already set by ExpectParams functions")
	}

	mmUpdate.defaultExpectation.params = &AuthRepositoryMockUpdateParams{ctx, userUp}
	mmUpdate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// ExpectCtxParam1 sets up expected param ctx for AuthRepository.Update
func (mmUpdate *mAuthRepositoryMockUpdate) ExpectCtxParam1(ctx context.Context) *mAuthRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &AuthRepositoryMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("AuthRepositoryMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &AuthRepositoryMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdate
}

// ExpectUserUpParam2 sets up expected param userUp for AuthRepository.Update
func (mmUpdate *mAuthRepositoryMockUpdate) ExpectUserUpParam2(userUp *model.UpdateUser) *mAuthRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &AuthRepositoryMockUpdateExpectation{}
	}

	if mmUpdate.defaultExpectation.params != nil {
		mmUpdate.mock.t.Fatalf("AuthRepositoryMock.Update mock is already set by Expect")
	}

	if mmUpdate.defaultExpectation.paramPtrs == nil {
		mmUpdate.defaultExpectation.paramPtrs = &AuthRepositoryMockUpdateParamPtrs{}
	}
	mmUpdate.defaultExpectation.paramPtrs.userUp = &userUp
	mmUpdate.defaultExpectation.expectationOrigins.originUserUp = minimock.CallerInfo(1)

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the AuthRepository.Update
func (mmUpdate *mAuthRepositoryMockUpdate) Inspect(f func(ctx context.Context, userUp *model.UpdateUser)) *mAuthRepositoryMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for AuthRepositoryMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by AuthRepository.Update
func (mmUpdate *mAuthRepositoryMockUpdate) Return(ep1 *emptypb.Empty, err error) *AuthRepositoryMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &AuthRepositoryMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &AuthRepositoryMockUpdateResults{ep1, err}
	mmUpdate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdate.mock
}

// Set uses given function f to mock the AuthRepository.Update method
func (mmUpdate *mAuthRepositoryMockUpdate) Set(f func(ctx context.Context, userUp *model.UpdateUser) (ep1 *emptypb.Empty, err error)) *AuthRepositoryMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the AuthRepository.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the AuthRepository.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	mmUpdate.mock.funcUpdateOrigin = minimock.CallerInfo(1)
	return mmUpdate.mock
}

// When sets expectation for the AuthRepository.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mAuthRepositoryMockUpdate) When(ctx context.Context, userUp *model.UpdateUser) *AuthRepositoryMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthRepositoryMock.Update mock is already set by Set")
	}

	expectation := &AuthRepositoryMockUpdateExpectation{
		mock:               mmUpdate.mock,
		params:             &AuthRepositoryMockUpdateParams{ctx, userUp},
		expectationOrigins: AuthRepositoryMockUpdateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up AuthRepository.Update return parameters for the expectation previously defined by the When method
func (e *AuthRepositoryMockUpdateExpectation) Then(ep1 *emptypb.Empty, err error) *AuthRepositoryMock {
	e.results = &AuthRepositoryMockUpdateResults{ep1, err}
	return e.mock
}

// Times sets number of times AuthRepository.Update should be invoked
func (mmUpdate *mAuthRepositoryMockUpdate) Times(n uint64) *mAuthRepositoryMockUpdate {
	if n == 0 {
		mmUpdate.mock.t.Fatalf("Times of AuthRepositoryMock.Update mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdate.expectedInvocations, n)
	mmUpdate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdate
}

func (mmUpdate *mAuthRepositoryMockUpdate) invocationsDone() bool {
	if len(mmUpdate.expectations) == 0 && mmUpdate.defaultExpectation == nil && mmUpdate.mock.funcUpdate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdate.mock.afterUpdateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Update implements mm_repository.AuthRepository
func (mmUpdate *AuthRepositoryMock) Update(ctx context.Context, userUp *model.UpdateUser) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	mmUpdate.t.Helper()

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, userUp)
	}

	mm_params := AuthRepositoryMockUpdateParams{ctx, userUp}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, &mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_want_ptrs := mmUpdate.UpdateMock.defaultExpectation.paramPtrs

		mm_got := AuthRepositoryMockUpdateParams{ctx, userUp}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdate.t.Errorf("AuthRepositoryMock.Update got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userUp != nil && !minimock.Equal(*mm_want_ptrs.userUp, mm_got.userUp) {
				mmUpdate.t.Errorf("AuthRepositoryMock.Update got unexpected parameter userUp, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.originUserUp, *mm_want_ptrs.userUp, mm_got.userUp, minimock.Diff(*mm_want_ptrs.userUp, mm_got.userUp))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("AuthRepositoryMock.Update got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdate.UpdateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the AuthRepositoryMock.Update")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, userUp)
	}
	mmUpdate.t.Fatalf("Unexpected call to AuthRepositoryMock.Update. %v %v", ctx, userUp)
	return
}

// UpdateAfterCounter returns a count of finished AuthRepositoryMock.Update invocations
func (mmUpdate *AuthRepositoryMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of AuthRepositoryMock.Update invocations
func (mmUpdate *AuthRepositoryMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to AuthRepositoryMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mAuthRepositoryMockUpdate) Calls() []*AuthRepositoryMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*AuthRepositoryMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *AuthRepositoryMock) MinimockUpdateDone() bool {
	if m.UpdateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateMock.invocationsDone()
}

// MinimockUpdateInspect logs each unmet expectation
func (m *AuthRepositoryMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthRepositoryMock.Update at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateCounter := mm_atomic.LoadUint64(&m.afterUpdateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && afterUpdateCounter < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthRepositoryMock.Update at\n%s", m.UpdateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthRepositoryMock.Update at\n%s with params: %#v", m.UpdateMock.defaultExpectation.expectationOrigins.origin, *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && afterUpdateCounter < 1 {
		m.t.Errorf("Expected call to AuthRepositoryMock.Update at\n%s", m.funcUpdateOrigin)
	}

	if !m.UpdateMock.invocationsDone() && afterUpdateCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthRepositoryMock.Update at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateMock.expectedInvocations), m.UpdateMock.expectedInvocationsOrigin, afterUpdateCounter)
	}
}

type mAuthRepositoryMockWithTx struct {
	optional           bool
	mock               *AuthRepositoryMock
	defaultExpectation *AuthRepositoryMockWithTxExpectation
	expectations       []*AuthRepositoryMockWithTxExpectation

	callArgs []*AuthRepositoryMockWithTxParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AuthRepositoryMockWithTxExpectation specifies expectation struct of the AuthRepository.WithTx
type AuthRepositoryMockWithTxExpectation struct {
	mock               *AuthRepositoryMock
	params             *AuthRepositoryMockWithTxParams
	paramPtrs          *AuthRepositoryMockWithTxParamPtrs
	expectationOrigins AuthRepositoryMockWithTxExpectationOrigins
	results            *AuthRepositoryMockWithTxResults
	returnOrigin       string
	Counter            uint64
}

// AuthRepositoryMockWithTxParams contains parameters of the AuthRepository.WithTx
type AuthRepositoryMockWithTxParams struct {
	tx pgx.Tx
}

// AuthRepositoryMockWithTxParamPtrs contains pointers to parameters of the AuthRepository.WithTx
type AuthRepositoryMockWithTxParamPtrs struct {
	tx *pgx.Tx
}

// AuthRepositoryMockWithTxResults contains results of the AuthRepository.WithTx
type AuthRepositoryMockWithTxResults struct {
	a1 mm_repository.UsersRepository
}

// AuthRepositoryMockWithTxOrigins contains origins of expectations of the AuthRepository.WithTx
type AuthRepositoryMockWithTxExpectationOrigins struct {
	origin   string
	originTx string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmWithTx *mAuthRepositoryMockWithTx) Optional() *mAuthRepositoryMockWithTx {
	mmWithTx.optional = true
	return mmWithTx
}

// Expect sets up expected params for AuthRepository.WithTx
func (mmWithTx *mAuthRepositoryMockWithTx) Expect(tx pgx.Tx) *mAuthRepositoryMockWithTx {
	if mmWithTx.mock.funcWithTx != nil {
		mmWithTx.mock.t.Fatalf("AuthRepositoryMock.WithTx mock is already set by Set")
	}

	if mmWithTx.defaultExpectation == nil {
		mmWithTx.defaultExpectation = &AuthRepositoryMockWithTxExpectation{}
	}

	if mmWithTx.defaultExpectation.paramPtrs != nil {
		mmWithTx.mock.t.Fatalf("AuthRepositoryMock.WithTx mock is already set by ExpectParams functions")
	}

	mmWithTx.defaultExpectation.params = &AuthRepositoryMockWithTxParams{tx}
	mmWithTx.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmWithTx.expectations {
		if minimock.Equal(e.params, mmWithTx.defaultExpectation.params) {
			mmWithTx.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWithTx.defaultExpectation.params)
		}
	}

	return mmWithTx
}

// ExpectTxParam1 sets up expected param tx for AuthRepository.WithTx
func (mmWithTx *mAuthRepositoryMockWithTx) ExpectTxParam1(tx pgx.Tx) *mAuthRepositoryMockWithTx {
	if mmWithTx.mock.funcWithTx != nil {
		mmWithTx.mock.t.Fatalf("AuthRepositoryMock.WithTx mock is already set by Set")
	}

	if mmWithTx.defaultExpectation == nil {
		mmWithTx.defaultExpectation = &AuthRepositoryMockWithTxExpectation{}
	}

	if mmWithTx.defaultExpectation.params != nil {
		mmWithTx.mock.t.Fatalf("AuthRepositoryMock.WithTx mock is already set by Expect")
	}

	if mmWithTx.defaultExpectation.paramPtrs == nil {
		mmWithTx.defaultExpectation.paramPtrs = &AuthRepositoryMockWithTxParamPtrs{}
	}
	mmWithTx.defaultExpectation.paramPtrs.tx = &tx
	mmWithTx.defaultExpectation.expectationOrigins.originTx = minimock.CallerInfo(1)

	return mmWithTx
}

// Inspect accepts an inspector function that has same arguments as the AuthRepository.WithTx
func (mmWithTx *mAuthRepositoryMockWithTx) Inspect(f func(tx pgx.Tx)) *mAuthRepositoryMockWithTx {
	if mmWithTx.mock.inspectFuncWithTx != nil {
		mmWithTx.mock.t.Fatalf("Inspect function is already set for AuthRepositoryMock.WithTx")
	}

	mmWithTx.mock.inspectFuncWithTx = f

	return mmWithTx
}

// Return sets up results that will be returned by AuthRepository.WithTx
func (mmWithTx *mAuthRepositoryMockWithTx) Return(a1 mm_repository.UsersRepository) *AuthRepositoryMock {
	if mmWithTx.mock.funcWithTx != nil {
		mmWithTx.mock.t.Fatalf("AuthRepositoryMock.WithTx mock is already set by Set")
	}

	if mmWithTx.defaultExpectation == nil {
		mmWithTx.defaultExpectation = &AuthRepositoryMockWithTxExpectation{mock: mmWithTx.mock}
	}
	mmWithTx.defaultExpectation.results = &AuthRepositoryMockWithTxResults{a1}
	mmWithTx.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmWithTx.mock
}

// Set uses given function f to mock the AuthRepository.WithTx method
func (mmWithTx *mAuthRepositoryMockWithTx) Set(f func(tx pgx.Tx) (a1 mm_repository.UsersRepository)) *AuthRepositoryMock {
	if mmWithTx.defaultExpectation != nil {
		mmWithTx.mock.t.Fatalf("Default expectation is already set for the AuthRepository.WithTx method")
	}

	if len(mmWithTx.expectations) > 0 {
		mmWithTx.mock.t.Fatalf("Some expectations are already set for the AuthRepository.WithTx method")
	}

	mmWithTx.mock.funcWithTx = f
	mmWithTx.mock.funcWithTxOrigin = minimock.CallerInfo(1)
	return mmWithTx.mock
}

// When sets expectation for the AuthRepository.WithTx which will trigger the result defined by the following
// Then helper
func (mmWithTx *mAuthRepositoryMockWithTx) When(tx pgx.Tx) *AuthRepositoryMockWithTxExpectation {
	if mmWithTx.mock.funcWithTx != nil {
		mmWithTx.mock.t.Fatalf("AuthRepositoryMock.WithTx mock is already set by Set")
	}

	expectation := &AuthRepositoryMockWithTxExpectation{
		mock:               mmWithTx.mock,
		params:             &AuthRepositoryMockWithTxParams{tx},
		expectationOrigins: AuthRepositoryMockWithTxExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmWithTx.expectations = append(mmWithTx.expectations, expectation)
	return expectation
}

// Then sets up AuthRepository.WithTx return parameters for the expectation previously defined by the When method
func (e *AuthRepositoryMockWithTxExpectation) Then(a1 mm_repository.UsersRepository) *AuthRepositoryMock {
	e.results = &AuthRepositoryMockWithTxResults{a1}
	return e.mock
}

// Times sets number of times AuthRepository.WithTx should be invoked
func (mmWithTx *mAuthRepositoryMockWithTx) Times(n uint64) *mAuthRepositoryMockWithTx {
	if n == 0 {
		mmWithTx.mock.t.Fatalf("Times of AuthRepositoryMock.WithTx mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmWithTx.expectedInvocations, n)
	mmWithTx.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmWithTx
}

func (mmWithTx *mAuthRepositoryMockWithTx) invocationsDone() bool {
	if len(mmWithTx.expectations) == 0 && mmWithTx.defaultExpectation == nil && mmWithTx.mock.funcWithTx == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmWithTx.mock.afterWithTxCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmWithTx.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// WithTx implements mm_repository.AuthRepository
func (mmWithTx *AuthRepositoryMock) WithTx(tx pgx.Tx) (a1 mm_repository.UsersRepository) {
	mm_atomic.AddUint64(&mmWithTx.beforeWithTxCounter, 1)
	defer mm_atomic.AddUint64(&mmWithTx.afterWithTxCounter, 1)

	mmWithTx.t.Helper()

	if mmWithTx.inspectFuncWithTx != nil {
		mmWithTx.inspectFuncWithTx(tx)
	}

	mm_params := AuthRepositoryMockWithTxParams{tx}

	// Record call args
	mmWithTx.WithTxMock.mutex.Lock()
	mmWithTx.WithTxMock.callArgs = append(mmWithTx.WithTxMock.callArgs, &mm_params)
	mmWithTx.WithTxMock.mutex.Unlock()

	for _, e := range mmWithTx.WithTxMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.a1
		}
	}

	if mmWithTx.WithTxMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWithTx.WithTxMock.defaultExpectation.Counter, 1)
		mm_want := mmWithTx.WithTxMock.defaultExpectation.params
		mm_want_ptrs := mmWithTx.WithTxMock.defaultExpectation.paramPtrs

		mm_got := AuthRepositoryMockWithTxParams{tx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.tx != nil && !minimock.Equal(*mm_want_ptrs.tx, mm_got.tx) {
				mmWithTx.t.Errorf("AuthRepositoryMock.WithTx got unexpected parameter tx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWithTx.WithTxMock.defaultExpectation.expectationOrigins.originTx, *mm_want_ptrs.tx, mm_got.tx, minimock.Diff(*mm_want_ptrs.tx, mm_got.tx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWithTx.t.Errorf("AuthRepositoryMock.WithTx got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmWithTx.WithTxMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmWithTx.WithTxMock.defaultExpectation.results
		if mm_results == nil {
			mmWithTx.t.Fatal("No results are set for the AuthRepositoryMock.WithTx")
		}
		return (*mm_results).a1
	}
	if mmWithTx.funcWithTx != nil {
		return mmWithTx.funcWithTx(tx)
	}
	mmWithTx.t.Fatalf("Unexpected call to AuthRepositoryMock.WithTx. %v", tx)
	return
}

// WithTxAfterCounter returns a count of finished AuthRepositoryMock.WithTx invocations
func (mmWithTx *AuthRepositoryMock) WithTxAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWithTx.afterWithTxCounter)
}

// WithTxBeforeCounter returns a count of AuthRepositoryMock.WithTx invocations
func (mmWithTx *AuthRepositoryMock) WithTxBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWithTx.beforeWithTxCounter)
}

// Calls returns a list of arguments used in each call to AuthRepositoryMock.WithTx.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWithTx *mAuthRepositoryMockWithTx) Calls() []*AuthRepositoryMockWithTxParams {
	mmWithTx.mutex.RLock()

	argCopy := make([]*AuthRepositoryMockWithTxParams, len(mmWithTx.callArgs))
	copy(argCopy, mmWithTx.callArgs)

	mmWithTx.mutex.RUnlock()

	return argCopy
}

// MinimockWithTxDone returns true if the count of the WithTx invocations corresponds
// the number of defined expectations
func (m *AuthRepositoryMock) MinimockWithTxDone() bool {
	if m.WithTxMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.WithTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.WithTxMock.invocationsDone()
}

// MinimockWithTxInspect logs each unmet expectation
func (m *AuthRepositoryMock) MinimockWithTxInspect() {
	for _, e := range m.WithTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthRepositoryMock.WithTx at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterWithTxCounter := mm_atomic.LoadUint64(&m.afterWithTxCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.WithTxMock.defaultExpectation != nil && afterWithTxCounter < 1 {
		if m.WithTxMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AuthRepositoryMock.WithTx at\n%s", m.WithTxMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AuthRepositoryMock.WithTx at\n%s with params: %#v", m.WithTxMock.defaultExpectation.expectationOrigins.origin, *m.WithTxMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWithTx != nil && afterWithTxCounter < 1 {
		m.t.Errorf("Expected call to AuthRepositoryMock.WithTx at\n%s", m.funcWithTxOrigin)
	}

	if !m.WithTxMock.invocationsDone() && afterWithTxCounter > 0 {
		m.t.Errorf("Expected %d calls to AuthRepositoryMock.WithTx at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.WithTxMock.expectedInvocations), m.WithTxMock.expectedInvocationsOrigin, afterWithTxCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AuthRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockDeleteInspect()

			m.MinimockGetInspect()

			m.MinimockUpdateInspect()

			m.MinimockWithTxInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AuthRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AuthRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockUpdateDone() &&
		m.MinimockWithTxDone()
}
